"use strict";(self.webpackChunktreespider_doc=self.webpackChunktreespider_doc||[]).push([[4094],{1715:(e,t,r)=>{r.r(t),r.d(t,{TSpydExample1:()=>p,TSpydExample2:()=>h,TSpydExample3:()=>u,TSpydExample4:()=>m,TSpydExample5:()=>x,TSpydExample6:()=>g,TSpydExample7:()=>y,assets:()=>c,contentTitle:()=>l,default:()=>v,frontMatter:()=>s,metadata:()=>o,toc:()=>j});var n=r(4848),i=r(8453),a=r(6540),d=r(8777);const s={sidebar_position:5},l="Trees",o={id:"trees",title:"Trees",description:"These are the different tree choices that can be chosen from, they will be caterized into radial and non-radial trees:",source:"@site/docs/trees.mdx",sourceDirName:".",slug:"/trees",permalink:"/treespider-doc/docs/trees",draft:!1,unlisted:!1,editUrl:"https://github.com/paulosabayomi/treespider-doc/tree/main/docs/trees.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Tree Data",permalink:"/treespider-doc/docs/tree-data"},next:{title:"Chart Heads",permalink:"/treespider-doc/docs/chart-heads"}},c={},p=a.memo((()=>(a.useLayoutEffect((()=>{new d.A({targetContainer:"#spyd-tr-1",random_data_length:50,width:"100%",tree_type:"goldenRod"})}),[]),(0,n.jsx)("div",{id:"spyd-tr-1",style:{marginBottom:25}})))),h=a.memo((()=>(a.useLayoutEffect((()=>{new d.A({targetContainer:"#spyd-tr-2",random_data_length:50,width:"100%",tree_type:"radialSpiderLeg"})}),[]),(0,n.jsx)("div",{id:"spyd-tr-2",style:{marginBottom:25}})))),u=a.memo((()=>(a.useLayoutEffect((()=>{new d.A({targetContainer:"#spyd-tr-3",random_data_length:50,width:"100%",tree_type:"default"})}),[]),(0,n.jsx)("div",{id:"spyd-tr-3",style:{marginBottom:25}})))),m=a.memo((()=>(a.useLayoutEffect((()=>{new d.A({targetContainer:"#spyd-tr-4",random_data_length:50,width:"100%",tree_type:"cellar"})}),[]),(0,n.jsx)("div",{id:"spyd-tr-4",style:{marginBottom:25}})))),x=a.memo((()=>(a.useLayoutEffect((()=>{new d.A({targetContainer:"#spyd-tr-5",random_data_length:50,width:"100%",tree_type:"hSpider"})}),[]),(0,n.jsx)("div",{id:"spyd-tr-5",style:{marginBottom:25}})))),g=a.memo((()=>(a.useLayoutEffect((()=>{new d.A({targetContainer:"#spyd-tr-6",random_data_length:50,width:"100%",tree_type:"hSpiderWalk"})}),[]),(0,n.jsx)("div",{id:"spyd-tr-6",style:{marginBottom:25}})))),y=a.memo((()=>(a.useLayoutEffect((()=>{new d.A({targetContainer:"#spyd-tr-7",random_data_length:50,width:"100%",tree_type:"vSpiderWalk"})}),[]),(0,n.jsx)("div",{id:"spyd-tr-7",style:{marginBottom:25}})))),j=[{value:"Radial trees",id:"radial-trees",level:2},{value:"goldenRod",id:"goldenrod",level:3},{value:"radialSpiderLeg",id:"radialspiderleg",level:3},{value:"Non-radial trees",id:"non-radial-trees",level:2},{value:"default",id:"default",level:3},{value:"cellar",id:"cellar",level:3},{value:"hSpider",id:"hspider",level:3},{value:"hSpiderWalk",id:"hspiderwalk",level:3},{value:"vSpiderWalk",id:"vspiderwalk",level:3}];function f(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"trees",children:"Trees"})}),"\n",(0,n.jsx)(t.p,{children:"These are the different tree choices that can be chosen from, they will be caterized into radial and non-radial trees:"}),"\n",(0,n.jsx)(t.h2,{id:"radial-trees",children:"Radial trees"}),"\n",(0,n.jsx)(t.p,{children:"The following are the radial or circular trees"}),"\n",(0,n.jsx)(t.h3,{id:"goldenrod",children:"goldenRod"}),"\n",(0,n.jsx)(t.p,{children:"The goldenRod tree type is one of the radial tree types, example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const instance1 = new TreeSpider({\n    targetContainer: "#container-1",\n    tree_type: "goldenRod"\n})\n'})}),"\n",(0,n.jsx)(t.p,{children:"if you run this it would look something like this:"}),"\n","\n",(0,n.jsx)(p,{}),"\n",(0,n.jsx)(t.h3,{id:"radialspiderleg",children:"radialSpiderLeg"}),"\n",(0,n.jsx)(t.p,{children:"The radialSpiderLeg tree type is the second radial type tree types, example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const instance1 = new TreeSpider({\n    targetContainer: "#container-1",\n    tree_type: "radialSpiderLeg"\n})\n'})}),"\n",(0,n.jsx)(t.p,{children:"if you run this it would look something like this:"}),"\n","\n",(0,n.jsx)(h,{}),"\n",(0,n.jsx)(t.h2,{id:"non-radial-trees",children:"Non-radial trees"}),"\n",(0,n.jsx)(t.p,{children:"The following are the non-radial trees types."}),"\n",(0,n.jsx)(t.h3,{id:"default",children:"default"}),"\n",(0,n.jsx)(t.p,{children:"This is the default tree type, and it is also useful in but not limited to organizations with hierarchical type structure, example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const instance1 = new TreeSpider({\n    targetContainer: "#container-1",\n    tree_type: "default"\n})\n'})}),"\n","\n",(0,n.jsx)(u,{}),"\n",(0,n.jsx)(t.h3,{id:"cellar",children:"cellar"}),"\n",(0,n.jsx)(t.p,{children:"The cellar tree structure is also useful in but not limited to organizations with hierarchical type structure, example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const instance1 = new TreeSpider({\n    targetContainer: "#container-1",\n    tree_type: "cellar"\n})\n'})}),"\n","\n",(0,n.jsx)(m,{}),"\n",(0,n.jsx)(t.h3,{id:"hspider",children:"hSpider"}),"\n",(0,n.jsx)(t.p,{children:"The hSpider tree is an horizontal tree, example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const instance1 = new TreeSpider({\n    targetContainer: "#container-1",\n    tree_type: "hSpider"\n})\n'})}),"\n","\n",(0,n.jsx)(x,{}),"\n",(0,n.jsx)(t.h3,{id:"hspiderwalk",children:"hSpiderWalk"}),"\n",(0,n.jsx)(t.p,{children:'The hSpiderWalk tree is an horizontal tree just like the hSpider but it is in the shape of the letter "H", example'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const instance1 = new TreeSpider({\n    targetContainer: "#container-1",\n    tree_type: "hSpiderWalk"\n})\n'})}),"\n","\n",(0,n.jsx)(g,{}),"\n",(0,n.jsx)(t.h3,{id:"vspiderwalk",children:"vSpiderWalk"}),"\n",(0,n.jsx)(t.p,{children:"The vSpiderWalk tree is a verticaal tree just like the hSpiderWalk but it is vertical, example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const instance1 = new TreeSpider({\n    targetContainer: "#container-1",\n    tree_type: "vSpiderWalk"\n})\n'})}),"\n","\n",(0,n.jsx)(y,{})]})}function v(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(f,{...e})}):f(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>s});var n=r(6540);const i={},a=n.createContext(i);function d(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);